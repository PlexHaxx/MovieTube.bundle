import httplib, urllib, re
from lxml import etree

MOVIES_HOST = 'http://www.movietubenow.com'
MOVIES_SEARCH = '%s/index.php' % MOVIES_HOST
HTTP_HEADERS = {
  'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36'
}
RE_ID = r'watch\.php\?v=([a-zA-Z0-9]+)'
XMLDIR = '/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-ins/MovieTube.bundle/Contents/Resources'

####################################################################################################
def MetadataObjectForURL(url):
    try:
        parser = etree.XMLParser(recover=True)
        xml = '%s/incinema.xml' % XMLDIR
        list = etree.parse(xml, parser=parser).getroot()

        xtitle = "//items/item[video_url='%s']/%s/text()" % (url,'title')
        xsummary = "//items/item[video_url='%s']/%s/text()" % (url,'summary')
        xthumb = "//items/item[video_url='%s']/%s/text()" % (url,'thumb')
        
        title = list.xpath(xtitle)[0]
        summary = list.xpath(xsummary)[0]
        thumb = list.xpath(xthumb)[0]

    except:
        Log.Exception("Couldn't read XML file")

    else: 
        return VideoClipObject(
            title = title,
            summary = summary,
            thumb = thumb
        )

####################################################################################################
def MediaObjectsForURL(url):
    return [
        MediaObject(
            parts = [
                PartObject(
                    key=Callback(PlayVideo, url = url)
                )
            ],
            container = 'mp4',
            audio_codec = AudioCodec.AAC,
            video_codec = VideoCodec.H264,
            optimized_for_streaming = True,
            video_resolution = '720'
        )
    ]

####################################################################################################
#@indirect
def PlayVideo(url):
#    try:
#        id = re.findall(RE_ID, url)
#        params = urllib.urlencode({
#            'c':'result',
#            'a':'getplayerinfo',
#            'p':'{"KeyWord":"' + id[0] + '"}'
#        })
#        req2 = urllib2.Request(MOVIES_SEARCH, params, HTTP_HEADERS)
#        video = urllib2.urlopen(req2).read()
#
#        # See if there is a Google Docs URL
#        try:
#            gdocs = re.findall(RE_DOCS, video)[0]
#        except:
#            gdocs = ''
#
#    except IndexError as error:
#        pass
#
#    except Exception as error:
#        Log.Error(error)
#        #print "Could not POST for clip information"
#        #print type(error)
#        #print error.args
#        #print error
#
#    else:
#        if gdocs:
#            video_url = gdocs
#        elif video.find('vjplayer') > -1:
#            expr = r'src="(.*?)"'
#            video_url = re.findall(expr, urllib.unquote(video).decode('utf8'))[0]
#        elif video.find('vkplayer') > -1:
#            expr = r'data="(.*?)"'
#            video_url = re.findall(expr, urllib.unquote(video).decode('utf8'))[0]
#        elif video.find('uplayer') > -1:
#            expr = r'src="(.*?)"'
#            video_url = re.findall(expr, urllib.unquote(video).decode('utf8'))[0]
#        else:
#            video_url = video
#
        return Redirect(url)
        #return Redirect(video_url)
        #return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
